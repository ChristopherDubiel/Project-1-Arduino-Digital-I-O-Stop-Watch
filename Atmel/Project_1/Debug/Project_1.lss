
Project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800114  00800114  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ad  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  00001517  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b6  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	65 00       	.word	0x0065	; ????
  6a:	69 00       	.word	0x0069	; ????
  6c:	6d 00       	.word	0x006d	; ????
  6e:	71 00       	.word	0x0071	; ????
  70:	75 00       	.word	0x0075	; ????
  72:	79 00       	.word	0x0079	; ????
  74:	7d 00       	.word	0x007d	; ????
  76:	81 00       	.word	0x0081	; ????
  78:	85 00       	.word	0x0085	; ????
  7a:	89 00       	.word	0x0089	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e1       	ldi	r30, 0x18	; 24
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 31       	cpi	r26, 0x14	; 20
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e1       	ldi	r26, 0x14	; 20
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 32       	cpi	r26, 0x22	; 34
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 91 00 	call	0x122	; 0x122 <main>
  b2:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <dispNum>:
}

//function that gets passed an integer value 0-10 and sets the proper pins to display that number on a 7 seg display
void dispNum (int num) {

	switch (num) {
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	91 05       	cpc	r25, r1
  be:	68 f5       	brcc	.+90     	; 0x11a <dispNum+0x60>
  c0:	fc 01       	movw	r30, r24
  c2:	ec 5c       	subi	r30, 0xCC	; 204
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	0c 94 84 01 	jmp	0x308	; 0x308 <__tablejump2__>
		case 0:
		PORTD = num0bit;
  ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <num0bit>
  ce:	8b b9       	out	0x0b, r24	; 11
		break;
  d0:	08 95       	ret

		case 1:
		PORTD = num1bit;
  d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <num1bit>
  d6:	8b b9       	out	0x0b, r24	; 11
		break;
  d8:	08 95       	ret
		
		case 2:
		PORTD = num2bit;
  da:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <num2bit>
  de:	8b b9       	out	0x0b, r24	; 11
		break;
  e0:	08 95       	ret

		case 3:
		PORTD = num3bit;
  e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <num3bit>
  e6:	8b b9       	out	0x0b, r24	; 11
		break;
  e8:	08 95       	ret

		case 4:
		PORTD = num4bit;
  ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <num4bit>
  ee:	8b b9       	out	0x0b, r24	; 11
		break;
  f0:	08 95       	ret

		case 5:
		PORTD = num5bit;
  f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <num5bit>
  f6:	8b b9       	out	0x0b, r24	; 11
		break;
  f8:	08 95       	ret
		
		case 6:
		PORTD = num6bit;
  fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num6bit>
  fe:	8b b9       	out	0x0b, r24	; 11
		break;
 100:	08 95       	ret

		case 7:
		PORTD = num7bit;
 102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <num7bit>
 106:	8b b9       	out	0x0b, r24	; 11
		break;
 108:	08 95       	ret

		case 8:
		PORTD = num8bit;
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num8bit>
 10e:	8b b9       	out	0x0b, r24	; 11
		break;
 110:	08 95       	ret

		case 9:
		PORTD = num9bit;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 116:	8b b9       	out	0x0b, r24	; 11
		break;
 118:	08 95       	ret
		
		default:
		PORTD = num0bit;
 11a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <num0bit>
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	08 95       	ret

00000122 <main>:
int dig4 = 0;

int main(void)
{
	//Timer interrupt setup
	cli();//stops all interrupts
 122:	f8 94       	cli
	TCCR1A = 0;//set TCCR1A register = 0
 124:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0;//set TCCR1B register = 0
 128:	e1 e8       	ldi	r30, 0x81	; 129
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	10 82       	st	Z, r1
	TCNT1  = 0;//starting counter value
 12e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 132:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = 624;// time when the timer interrupt is tripped
 136:	80 e7       	ldi	r24, 0x70	; 112
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 13e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1B |= (1 << WGM12);//timer1 turn on CTC (compare match)
 142:	80 81       	ld	r24, Z
 144:	88 60       	ori	r24, 0x08	; 8
 146:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12);//pre-scaler of 256
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);//enable timer compare interrupt
 14e:	ef e6       	ldi	r30, 0x6F	; 111
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	82 60       	ori	r24, 0x02	; 2
 156:	80 83       	st	Z, r24
	sei();//allows for interrupts again
 158:	78 94       	sei

	//Button interrupt setup
	EIMSK = 0b00000001;
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	9d bb       	out	0x1d, r25	; 29
	PORTD = (1 << PORTD2);
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	8b b9       	out	0x0b, r24	; 11

	DDRD = 0B11111011; //set pins 0-7 & !2 to output and pin 2 to input
 162:	8b ef       	ldi	r24, 0xFB	; 251
 164:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0B11111111; //set pins 8-13 to output
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	84 b9       	out	0x04, r24	; 4

	//Set all ouput pins to low;
	PORTB =  0B00000001;
 16a:	95 b9       	out	0x05, r25	; 5
	PORTD = ~0B00000000;
 16c:	8b b9       	out	0x0b, r24	; 11
	while (1)
	{
		//Loop

		if(dig1!=0){
			PORTB = 0B00010001;
 16e:	01 e1       	ldi	r16, 0x11	; 17
			dispNum(dig1);
			_delay_ms(1);
		}

		PORTB = 0B00001000;
 170:	18 e0       	ldi	r17, 0x08	; 8
		dispNum(dig2);
		_delay_ms(1);

		PORTB = 0B00000101;
 172:	d5 e0       	ldi	r29, 0x05	; 5
		dispNum(dig3);
		_delay_ms(1);

		PORTB = 0B0000011;
 174:	c3 e0       	ldi	r28, 0x03	; 3

	while (1)
	{
		//Loop

		if(dig1!=0){
 176:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dig1>
 17a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dig1+0x1>
 17e:	89 2b       	or	r24, r25
 180:	69 f0       	breq	.+26     	; 0x19c <main+0x7a>
			PORTB = 0B00010001;
 182:	05 b9       	out	0x05, r16	; 5
			dispNum(dig1);
 184:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dig1>
 188:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dig1+0x1>
 18c:	0e 94 5d 00 	call	0xba	; 0xba <dispNum>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	9f e0       	ldi	r25, 0x0F	; 15
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x72>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x78>
 19a:	00 00       	nop
			_delay_ms(1);
		}

		PORTB = 0B00001000;
 19c:	15 b9       	out	0x05, r17	; 5
		dispNum(dig2);
 19e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <dig2>
 1a2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <dig2+0x1>
 1a6:	0e 94 5d 00 	call	0xba	; 0xba <dispNum>
 1aa:	8f e9       	ldi	r24, 0x9F	; 159
 1ac:	9f e0       	ldi	r25, 0x0F	; 15
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x8c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x92>
 1b4:	00 00       	nop
		_delay_ms(1);

		PORTB = 0B00000101;
 1b6:	d5 b9       	out	0x05, r29	; 5
		dispNum(dig3);
 1b8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dig3>
 1bc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dig3+0x1>
 1c0:	0e 94 5d 00 	call	0xba	; 0xba <dispNum>
 1c4:	8f e9       	ldi	r24, 0x9F	; 159
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xa6>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0xac>
 1ce:	00 00       	nop
		_delay_ms(1);

		PORTB = 0B0000011;
 1d0:	c5 b9       	out	0x05, r28	; 5
		dispNum(dig4);
 1d2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1d6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 1da:	0e 94 5d 00 	call	0xba	; 0xba <dispNum>
 1de:	8f e9       	ldi	r24, 0x9F	; 159
 1e0:	9f e0       	ldi	r25, 0x0F	; 15
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0xc0>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0xc6>
 1e8:	00 00       	nop
 1ea:	c5 cf       	rjmp	.-118    	; 0x176 <main+0x54>

000001ec <__vector_1>:
	}
}


//Push button interrupt
ISR(INT0_vect){
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
	cli();
 1fa:	f8 94       	cli

	EIMSK = 0b00000000;
 1fc:	1d ba       	out	0x1d, r1	; 29
	debFlag = 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <debFlag+0x1>
 206:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <debFlag>

	if (state==0){
 20a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <state>
 20e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <state+0x1>
 212:	89 2b       	or	r24, r25
 214:	39 f4       	brne	.+14     	; 0x224 <__vector_1+0x38>
		state = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 21e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
 222:	04 c0       	rjmp	.+8      	; 0x22c <__vector_1+0x40>
		} else{
		state = 0;
 224:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <state+0x1>
 228:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <state>
	}
}
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_11>:

//Timer interrupt
ISR(TIMER1_COMPA_vect) {
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25

	if(debFlag == 1){
 248:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <debFlag>
 24c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <debFlag+0x1>
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	b9 f4       	brne	.+46     	; 0x282 <__vector_11+0x48>
		if(debTime>=50){
 254:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <debTime>
 258:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <debTime+0x1>
 25c:	82 33       	cpi	r24, 0x32	; 50
 25e:	91 05       	cpc	r25, r1
 260:	5c f0       	brlt	.+22     	; 0x278 <__vector_11+0x3e>
			debTime=0;
 262:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <debTime+0x1>
 266:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <debTime>
			debFlag=0;
 26a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <debFlag+0x1>
 26e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <debFlag>
			EIMSK = 0b00000001;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	8d bb       	out	0x1d, r24	; 29
 276:	05 c0       	rjmp	.+10     	; 0x282 <__vector_11+0x48>
			}else{
			debTime++;
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <debTime+0x1>
 27e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <debTime>
		}
	}

	

	if(state==1){
 282:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <state>
 286:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <state+0x1>
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	b1 f5       	brne	.+108    	; 0x2fa <__vector_11+0xc0>
		dig4++;
 28e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 292:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 29c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		if (dig4>9){
 2a0:	0a 97       	sbiw	r24, 0x0a	; 10
 2a2:	5c f1       	brlt	.+86     	; 0x2fa <__vector_11+0xc0>
			dig3++;
 2a4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dig3>
 2a8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dig3+0x1>
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dig3+0x1>
 2b2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dig3>
			dig4=0;
 2b6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 2ba:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
			if(dig3>9){
 2be:	0a 97       	sbiw	r24, 0x0a	; 10
 2c0:	e4 f0       	brlt	.+56     	; 0x2fa <__vector_11+0xc0>
				dig2++;
 2c2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <dig2>
 2c6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <dig2+0x1>
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <dig2+0x1>
 2d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <dig2>
				dig3=0;
 2d4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <dig3+0x1>
 2d8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <dig3>
				if (dig2>9){
 2dc:	0a 97       	sbiw	r24, 0x0a	; 10
 2de:	6c f0       	brlt	.+26     	; 0x2fa <__vector_11+0xc0>
					dig1++;
 2e0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dig1>
 2e4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dig1+0x1>
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dig1+0x1>
 2ee:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dig1>
					dig2=0;
 2f2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <dig2+0x1>
 2f6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <dig2>
				}
			}
		}
	}
}
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__tablejump2__>:
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	05 90       	lpm	r0, Z+
 30e:	f4 91       	lpm	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	09 94       	ijmp

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
